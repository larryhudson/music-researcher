---
import {lookupDataForArtist, getArtistNameFromId} from "@src/utils/songkick";
import Layout from "@src/components/Layout.astro";
import Dump from "@src/components/Dump.astro";
import SongkickEvent from "@src/components/SongkickEvent.astro";
import LookupButton from "@src/components/LookupButton.astro";
import SongkickArtist from "@src/components/SongkickArtist.astro";

const artistId = Astro.params.artistId;
const {events, artists} = await lookupDataForArtist({artistId});
const artistName = await getArtistNameFromId({artistId});
const songkickUrl = `https://songkick.com/artists/${artistId}`

const spotifySearchUrl = `https://open.spotify.com/search/${encodeURIComponent(artistName)}/artists`
---


<Layout>
	<p><a href={songkickUrl}>View more info on Songkick</a></p>
	<LookupButton service="discogs" searchType="artist" query={artistName} />

	<LookupButton service="bandcamp" query={artistName} />
	
	<h2>Save to database</h2>
	<form method="POST" action="/db/artist">
		<input name="name" type="hidden" value={artistName} />
		<input name="external_links__service" type="hidden" value="songkick" />
		<input name="external_links__url" type="hidden" value={Astro.url} />
		<input name="from" type="hidden" value={Astro.url} />
		<button>Save</button>
	</form>



	<h2>Artists</h2>
	<ul class="songkick-artists">
	{artists.map(artist => (
	<SongkickArtist url={artist.sameAs} text={artist.name} count={artist.count} />
	))}
	</ul>

	<form method="POST" action="/spotify/lookup-multiple">
		{artists.map(artist => (<input type="hidden" name="name" value={artist.name} />))}
		<button>Lookup all artists on Spotify</button>
	</form>
	<Dump data={artists} />

	<h2>Events</h2>
	{events.map(event => (
	<SongkickEvent data={event} />
	))}
</Layout>

<style>
	.songkick-artists {
		display: grid;
		grid-template-columns: 1fr 1fr 1fr;
	}
</style>
